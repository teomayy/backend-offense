import {
	BadRequestException,
	Injectable,
	Logger,
	NotFoundException
} from '@nestjs/common'
import { FineStatus } from '@prisma/client'

import { EskizService } from 'src/eskiz/eskiz.service'
import { PaymeService } from 'src/payment/payment.service'
import { PrismaService } from 'src/prisma.service'
import { CreateFineDto } from './dto/create.fine.dto'
import { UpdateFineDto } from './dto/update.fine'

@Injectable()
export class FineService {
	private readonly logger = new Logger(FineService.name)

	constructor(
		private prisma: PrismaService,
		private eskizService: EskizService,
		private paymeService: PaymeService
	) {}

	private generatePaymentReference(): string {
		const reference = Math.random().toString(36).substring(2, 15).toUpperCase()
		console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞:', reference) // –õ–æ–≥–∏—Ä—É–µ–º
		return reference
	}

	async createFine(inspectorId: string, dto: CreateFineDto) {
		const fineType = await this.prisma.fineType.findUnique({
			where: { id: dto.fineTypeId }
		})

		if (!fineType) {
			throw new NotFoundException('–¢–∏–ø —à—Ç—Ä–∞—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}

		let amount = 0
		const baseSalary = dto.baseSalary || 0

		if (fineType.fixedAmount) {
			amount = fineType.fixedAmount
		} else if (fineType.percentage) {
			if (!baseSalary) {
				throw new BadRequestException(
					'–ë–∞–∑–æ–≤—ã–π –æ–∫–ª–∞–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞'
				)
			}
			amount = Math.round(baseSalary * (fineType.percentage / 100))
		} else if (dto.amount) {
			amount = dto.amount
		} else {
			throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞')
		}

		const discountedAmount = Math.round(amount / 2)
		const dueDate = new Date()
		dueDate.setDate(dueDate.getDate() + 15)

		const fine = await this.prisma.fine.create({
			data: {
				inspectorId,
				name: dto.name,
				phone: dto.phone,
				fineTypeId: dto.fineTypeId,
				baseSalary,
				amount,
				discountedAmount,
				dueDate,
				paymentReference: this.generatePaymentReference(),
				status: FineStatus.pending
			}
		})

		await this.eskizService.sendSms(
			dto.phone,
			`–í–∞–º –≤—ã–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${amount} —Å—É–º. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ ${dueDate.toLocaleDateString()}, —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç ${discountedAmount} —Å—É–º. –û–ø–ª–∞—Ç–∞ –ø–æ —Å—á–µ—Ç—É: ${fine.paymentReference}.`
		)

		const receiptRes = await this.paymeService.createReceipt(
			fine.id,
			fine.amount,
			'–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞'
		)

		console.log('üîπ –û—Ç–≤–µ—Ç –æ—Ç Payme API:', JSON.stringify(receiptRes, null, 2))

		if (!receiptRes?.result?.receipt) {
			throw new Error('–û—à–∏–±–∫–∞: Payme –Ω–µ –≤–µ—Ä–Ω—É–ª —á–µ–∫ (receipt)')
		}

		await this.prisma.payment.create({
			data: {
				fineId: fine.id,
				method: 'payme',
				status: 'pending',
				transactionId: receiptRes.result.receipt._id
			}
		})

		const receiptResponse = await this.paymeService.sendReceipt(
			receiptRes.result.receipt._id,
			fine.phone,
			`–í–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${fine.amount} —Å—É–º.`
		)

		console.log('‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Payme:', receiptResponse)

		this.logger.log(
			`–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä ${inspectorId} –≤—ã–ø–∏—Å–∞–ª —à—Ç—Ä–∞—Ñ ${fine.name} –Ω–∞ —Å—É–º–º—É ${fine.amount} —Å—É–º.`
		)

		return fine
	}

	async updateFine(fineId: string, dto: UpdateFineDto) {
		const fine = await this.getFineById(fineId)
		if (!fine) throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')

		const updatedFine = await this.prisma.fine.update({
			where: { id: fineId },
			data: { ...dto }
		})

		return updatedFine
	}

	async deleteFine(fineId: string) {
		console.log(`üîπ –£–¥–∞–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ —Å ID: ${fineId}`)

		const fine = await this.getFineById(fineId)
		if (!fine) {
			console.error(`‚ùå –®—Ç—Ä–∞—Ñ —Å ID ${fineId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
			throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}

		console.log(`‚úÖ –®—Ç—Ä–∞—Ñ –Ω–∞–π–¥–µ–Ω: ${JSON.stringify(fine, null, 2)}`)

		// –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
		await this.prisma.payment.deleteMany({
			where: { fineId: fineId }
		})

		// –£–¥–∞–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
		return this.prisma.fine.delete({
			where: { id: fineId }
		})
	}

	async getFinesWithFilters(query: {
		inspectorId?: string
		status?: FineStatus
		startDate?: string
		endDate?: string
	}) {
		const { inspectorId, status, startDate, endDate } = query

		const where: any = {}

		if (inspectorId) where.inspectorId = inspectorId
		if (status) where.status = status
		if (startDate && endDate) {
			where.issuedAt = { gte: new Date(startDate), lte: new Date(endDate) }
		}

		return this.prisma.fine.findMany({ where, orderBy: { createdAt: 'desc' } })
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
	 */
	async getFinesByInspector(inspectorId: string) {
		return this.prisma.fine.findMany({
			where: { inspectorId },
			orderBy: { createdAt: 'desc' }
		})
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à—Ç—Ä–∞—Ñ–µ
	 */
	async getFineById(fineId: string) {
		const fine = await this.prisma.fine.findUnique({
			where: { id: fineId },
			include: { FineType: true }
		})

		if (!fine) throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')

		return fine
	}

	async getFines() {
		return this.prisma.fine.findMany()
	}

	async updateFineStatus(fineId: string) {
		const fine = await this.getFineById(fineId)
		if (!fine) throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')

		if (fine.status === FineStatus.paid) {
			throw new BadRequestException('–®—Ç—Ä–∞—Ñ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω')
		}

		await this.prisma.fine.update({
			where: { id: fineId },
			data: { status: FineStatus.paid }
		})

		return { message: '–°—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' }
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —à—Ç—Ä–∞—Ñ–∞–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
	 */

	async getInspectorStats(inspectorId: string) {
		// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–æ–≤
		const totalFines = await this.prisma.fine.count({
			where: { inspectorId }
		})

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
		const paidFines = await this.prisma.fine.count({
			where: { inspectorId, status: FineStatus.paid }
		})

		// –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–∏—Å–∞–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
		const pendingFines = totalFines - paidFines

		// –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–∏—Å–∞–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
		const totalAmount = await this.prisma.fine.aggregate({
			where: { inspectorId },
			_sum: { amount: true }
		})

		// –°—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
		const paidAmount = await this.prisma.fine.aggregate({
			where: { inspectorId, status: FineStatus.paid },
			_sum: { amount: true }
		})

		return {
			totalAmount: totalAmount._sum.amount || 0,
			totalFines,
			paidAmount: paidAmount._sum.amount || 0,
			pendingFines,
			paidFines
		}
	}
}
