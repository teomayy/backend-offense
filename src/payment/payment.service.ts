import { HttpException, HttpStatus, Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import axios from 'axios'
import {
	PaymeError,
	PaymeMethod,
	TransactionState
} from 'src/constants/payme.constants'
import { PrismaService } from 'src/prisma.service'

@Injectable()
export class PaymeService {
	private readonly PAYME_KEY: string
	private readonly PAYME_MERCHANT_ID: string
	private readonly PAYME_BASE_URL: string

	constructor(
		private configService: ConfigService,
		private readonly prisma: PrismaService
	) {
		this.PAYME_KEY = this.configService.get<string>('PAYME_SECRET_KEY_TEST')
		this.PAYME_MERCHANT_ID = this.configService.get<string>('PAYME_MERCHANT_ID')
		this.PAYME_BASE_URL = 'https://test.paycom.uz'
	}

	/**
	 * üìå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ API Payme
	 */
	async createReceipt(orderId: string, amount: number, description?: string) {
		try {
			const payload = {
				id: Date.now().toString(),
				method: 'receipts.create',
				params: {
					amount,
					account: { order_id: orderId },
					description: description || '–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞',
					detail: {
						receipt_type: 0,
						items: [
							{
								title: '–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞',
								price: amount,
								count: 1,
								code: '00702001001000001',
								package_code: '123456',
								vat_percent: 15
							}
						]
					}
				}
			}

			const xAuth = `${'5e730e8e0b852a417aa49ceb'.trim()}:${'ZPDODSiTYKuX0jyO7Kl2to4rQbNwG08jbghj'.trim()}`

			console.log('üîπ PAYME_AUTH:', xAuth)
			console.log('üîπ PAYME_PAYLOAD:', JSON.stringify(payload, null, 2))

			const response = await axios.post(
				`https://checkout.test.paycom.uz/api`, // ‚úÖ –£–±—Ä–∞–ª `/api`
				payload,
				{
					headers: {
						'Content-Type': 'application/json',
						'X-Auth': xAuth
					}
				}
			)
			return response.data
		} catch (error) {
			console.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –≤ Payme:',
				error.response?.data || error
			)
			throw new HttpException(
				`–û—à–∏–±–∫–∞ Payme: ${error.response?.data?.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
				HttpStatus.BAD_REQUEST
			)
		}
	}

	/**
	 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ —á–µ—Ä–µ–∑ API Payme
	 */
	async sendReceipt(receiptId: string, phone: string, description: string) {
		try {
			const payload = {
				id: Date.now().toString(),
				method: 'receipts.send',
				params: {
					id: receiptId,
					phone,
					description
				}
			}

			const xAuth = `${'5e730e8e0b852a417aa49ceb'.trim()}:${'ZPDODSiTYKuX0jyO7Kl2to4rQbNwG08jbghj'.trim()}`

			console.log('üîπ PAYME_AUTH:', xAuth)
			console.log('üîπ PAYME_PAYLOAD:', JSON.stringify(payload, null, 2))

			const response = await axios.post(
				`https://checkout.test.paycom.uz/api`, // ‚úÖ –£–±—Ä–∞–ª `/api`
				payload,
				{
					headers: {
						'Content-Type': 'application/json',
						'X-Auth': xAuth
					}
				}
			)

			return response.data
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –≤ Payme:', error)
			throw new HttpException(
				`–û—à–∏–±–∫–∞ Payme: ${error.response?.data?.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
				HttpStatus.BAD_REQUEST
			)
		}
	}

	/**
	 * üìå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞)
	 */
	async performTransaction(params: any) {
		console.log('üîπ PerformTransaction –≤—ã–∑–≤–∞–Ω:', params)

		const transaction = await this.prisma.payment.findUnique({
			where: { transactionId: params.id },
			include: { fine: true }
		})

		if (!transaction || transaction.status !== 'pending') {
			throw new HttpException(
				PaymeError.TransactionNotFound,
				HttpStatus.BAD_REQUEST
			)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —à—Ç—Ä–∞—Ñ–∞
		await this.prisma.payment.update({
			where: { id: transaction.id },
			data: { status: 'success' }
		})

		await this.prisma.fine.update({
			where: { id: transaction.fine.id },
			data: { status: 'paid' }
		})
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞
		const receiptResponse = await this.sendReceipt(
			transaction.fine.id,
			transaction.fine.phone,
			'–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞'
		)

		return {
			result: {
				transaction: transaction.id,
				perform_time: Date.now(),
				state: TransactionState.Paid,
				receipt: receiptResponse
			}
		}
	}

	/**
	 * üìå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ `X-Auth`
	 */
	validateAuth(authHeader: string): boolean {
		if (!authHeader) return false
		console.log('üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:', authHeader)

		const authString =
			`Basic ` +
			Buffer.from(authHeader.split(' ')[1] || '', 'base64').toString()

		console.log('üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', authString)
		console.log('üîπ –û–∂–∏–¥–∞–µ–º:', `${this.PAYME_MERCHANT_ID}:${this.PAYME_KEY}`)

		return authString === `${this.PAYME_MERCHANT_ID}:${this.PAYME_KEY}`
	}

	/**
	 * üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Payme
	 */
	async handleWebhook(body: any) {
		const { method, params } = body

		switch (method) {
			case PaymeMethod.CheckPerformTransaction:
				return this.checkPerformTransaction(params)
			case PaymeMethod.CreateTransaction:
				return this.createTransaction(params)
			case PaymeMethod.PerformTransaction:
				return this.performTransaction(params)
			case PaymeMethod.CancelTransaction:
				return this.cancelTransaction(params)
			case PaymeMethod.CheckTransaction:
				return this.checkTransaction(params)
			default:
				throw new HttpException(
					{ code: -32601, message: { ru: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' } },
					HttpStatus.BAD_REQUEST
				)
		}
	}

	/**
	 * üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ (–µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑)
	 */
	async checkPerformTransaction(params: any) {
		console.log('üîπ CheckPerformTransaction –≤—ã–∑–≤–∞–Ω:', params)

		const orderId = params.account?.order_id

		if (!orderId) {
			throw new HttpException(PaymeError.ProductNotFound, HttpStatus.NOT_FOUND)
		}

		const fine = await this.findOrderById(orderId)
		if (!fine) {
			throw new HttpException(PaymeError.ProductNotFound, HttpStatus.NOT_FOUND)
		}

		if (fine.status !== 'pending') {
			throw new HttpException(
				PaymeError.CantDoOperation,
				HttpStatus.BAD_REQUEST
			)
		}

		if (fine.amount !== params.amount) {
			throw new HttpException(PaymeError.InvalidAmount, HttpStatus.BAD_REQUEST)
		}

		return { result: { allow: true } }
	}

	/**
	 * üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	 */
	async createTransaction(params: any) {
		console.log('üîπ CreateTransaction –≤—ã–∑–≤–∞–Ω:', params)

		const orderId = params.account?.order_id
		if (!orderId) {
			throw new HttpException(
				PaymeError.ProductNotFound,
				HttpStatus.BAD_REQUEST
			)
		}

		const fine = await this.findOrderById(orderId)
		if (!fine) {
			throw new HttpException(PaymeError.ProductNotFound, HttpStatus.NOT_FOUND)
		}

		if (fine.status !== 'pending') {
			throw new HttpException(
				PaymeError.CantDoOperation,
				HttpStatus.BAD_REQUEST
			)
		}

		const transaction = await this.prisma.payment.create({
			data: {
				fineId: orderId,
				method: 'payme',
				status: 'pending',
				transactionId: params.id
			}
		})
		return {
			result: {
				transaction: transaction.transactionId,
				create_time: Date.now(),
				state: TransactionState.Pending // –í –æ–∂–∏–¥–∞–Ω–∏–∏
			}
		}
	}

	/**
	 * üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	 */
	async checkTransaction(params: any) {
		console.log('üîπ CheckTransaction:', params)
		// –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
		const transaction = await this.prisma.payment.findUnique({
			where: { transactionId: params.id }
		})

		if (!transaction) {
			throw new HttpException(
				PaymeError.TransactionNotFound,
				HttpStatus.NOT_FOUND
			)
		}

		return {
			result: {
				create_time: transaction.createdAt.getTime(),
				transaction: transaction.transactionId,
				state:
					transaction.status === 'success'
						? TransactionState.Paid
						: TransactionState.Pending
			}
		}
	}

	/**
	 * üìå –û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	 */
	async cancelTransaction(params: any) {
		console.log('üîπ CancelTransaction –≤—ã–∑–≤–∞–Ω:', params)

		const transaction = await this.prisma.payment.findUnique({
			where: { transactionId: params.id },
			include: { fine: true }
		})

		if (!transaction) {
			throw new HttpException(
				PaymeError.TransactionNotFound,
				HttpStatus.NOT_FOUND
			)
		}

		await this.prisma.payment.update({
			where: { id: transaction.id },
			data: { status: 'failed' }
		})

		await this.prisma.fine.update({
			where: { id: transaction.fine.id },
			data: { status: 'pending' } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à—Ç—Ä–∞—Ñ –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
		})

		return {
			result: {
				transaction: transaction.id,
				cancel_time: Date.now(),
				state: TransactionState.PendingCanceled
			}
		}
	}

	/**
	 * üìå –ú–µ—Ç–æ–¥-–∑–∞–≥–ª—É—à–∫–∞: –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID
	 */
	async findOrderById(id: string) {
		const fine = await this.prisma.fine.findUnique({
			where: { id: id }
		})

		if (!fine) return null

		return {
			id: fine.id,
			amount: fine.amount,
			status: fine.status
		}
	}

	/**
	 * üìå –ú–µ—Ç–æ–¥-–∑–∞–≥–ª—É—à–∫–∞: –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
	 */
	async findTransactionById(id: string) {
		return {
			id,
			createTime: Date.now(),
			status: 1, // 1 - –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, 2 - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, -1 - –æ—Ç–º–µ–Ω–µ–Ω–∞
			amount: 100000,
			save: async function () {
				console.log(`Transaction ${this.id} updated!`)
			}
		}
	}
}
