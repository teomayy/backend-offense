import {
	BadRequestException,
	Injectable,
	NotFoundException
} from '@nestjs/common'
import { hash } from 'argon2'
import { CreateInspectorDto } from 'src/inspector/dto/create.inspector.dto'
import { UpdateInspectorDto } from 'src/inspector/dto/update.inspector.dto'
import { InspectorService } from 'src/inspector/inspector.service'
import { PrismaService } from 'src/prisma.service'
import { CreateAdminDto } from './dto/create.admin.dto'
import { UpdateAdminDto } from './dto/update.admin.dto'

@Injectable()
export class AdminService {
	constructor(
		private readonly prisma: PrismaService,
		private readonly inspectorService: InspectorService
	) {}

	async getById(id: string) {
		const admin = await this.prisma.admin.findUnique({ where: { id } })

		return admin
	}

	async getProfile(adminId: string) {
		console.log('üîç –ò—â–µ–º –∞–¥–º–∏–Ω–∞ —Å ID:', adminId)
		const admin = await this.prisma.admin.findUnique({
			where: { id: adminId },
			select: {
				id: true,
				login: true,
				name: true,
				createdAt: true,
				updatedAt: true
			}
		})

		if (!admin) {
			throw new NotFoundException('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}
		return admin
	}

	async updateProfile(id: string, dto: UpdateAdminDto) {
		let data = { ...dto }
		if (dto.password) {
			data = { ...dto, password: await hash(dto.password) }
		}
		return this.prisma.admin.update({
			where: { id },
			data
		})
	}

	async getByLogin(login: string) {
		const admin = await this.prisma.admin.findUnique({ where: { login } })

		return admin
	}

	async createAdmin(dto: CreateAdminDto) {
		const existingAdmin = await this.prisma.admin.findUnique({
			where: { login: dto.login }
		})
		if (existingAdmin) throw new Error('–ê–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

		const admin = {
			login: dto.login,
			name: dto.name,
			password: await hash(dto.password)
		}

		return this.prisma.admin.create({
			data: admin
		})
	}

	async getAllInspectors() {
		return this.prisma.inspector.findMany({
			include: {
				fines: true
			}
		})
	}

	async createInspector(dto: CreateInspectorDto) {
		const existingInspector = await this.inspectorService.getByLogin(dto.login)
		if (existingInspector)
			throw new Error('–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

		return this.prisma.inspector.create({
			data: {
				login: dto.login,
				name: dto.name,
				password: await hash(dto.password)
			}
		})
	}

	async updateInspector(id: string, dto: UpdateInspectorDto) {
		if (!id) throw new BadRequestException('ID –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω!')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const existingInspector = await this.prisma.inspector.findUnique({
			where: { id }
		})
		if (!existingInspector) {
			throw new NotFoundException(`–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
		}

		// –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		const data: any = { ...dto }

		// –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥–∞–Ω ‚Äì —Ö–µ—à–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
		if (dto.password && dto.password.trim() !== '') {
			data.password = await hash(dto.password)
		} else {
			delete data.password
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
		console.log(`üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ ID: ${id}`, data)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		return this.prisma.inspector.update({
			where: { id },
			data
		})
	}

	async deleteInspector(id: string) {
		const inspector = await this.prisma.inspector.findUnique({ where: { id } })

		if (!inspector) {
			throw new NotFoundException('–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
		}
		return this.prisma.inspector.delete({ where: { id } })
	}

	async getFines({
		inspectorId,
		status,
		sortBy = 'createdAt',
		order = 'asc'
	}: {
		inspectorId?: string
		status?: string
		sortBy?: string
		order?: string
	}) {
		const where: any = {}

		if (inspectorId) where.inspectorId = inspectorId
		if (status === 'deleted') where.status = 'deleted'

		return this.prisma.fine.findMany({
			where,
			orderBy: {
				[sortBy]: order
			},
			include: {
				inspector: true
			}
		})
	}

	async getFineDetails(id: string) {
		const fine = await this.prisma.fine.findUnique({
			where: { id },
			include: {
				inspector: true
			}
		})
		if (!fine) throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')

		return fine
	}

	async deleteFine(id: string) {
		const fine = await this.prisma.fine.findUnique({ where: { id } })

		if (!fine) throw new NotFoundException('–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')

		this.prisma.payment.deleteMany({ where: { fineId: id } })

		return this.prisma.fine.delete({ where: { id } })
	}

	async saveRefreshToken(userId: string, refreshToken: string) {
		await this.prisma.admin.update({
			where: { id: userId },
			data: { refreshToken }
		})
	}

	async clearRefreshToken(userId: string) {
		await this.prisma.admin.update({
			where: { id: userId },
			data: { refreshToken: null }
		})
	}

	async getStatistics() {
		const inspectorCount = await this.prisma.inspector.count()
		const activeFinesCount = await this.prisma.fine.count({
			where: { status: { in: ['paid', 'pending'] } }
		})
		const pendingFines = await this.prisma.fine.count({
			where: { status: { in: ['pending'] } }
		})
		return { inspectorCount, activeFinesCount, pendingFines }
	}
}
